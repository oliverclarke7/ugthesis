coreDataPath = '/Users/oliver/Desktop/ASI/ASI/MAT Files/core_ASI_data.csv';
revMarkerDir = '/Users/oliver/Desktop/ASI/ASI/MAT Files/';
outputFile = '/Users/oliver/Desktop/ASI/ASI/MAT Files/exploit_explore_data.csv';
ages = [30, 50, 70, 90, 120, 190];

generate_exploit_explore_data(coreDataPath, revMarkerDir, outputFile, ages);


function generate_exploit_explore_data(coreDataPath, revMarkerDir, outputFile, ages)
    % Generates a summary file (exploit_explore_data.csv) capturing CPs before and after reversals.
    % Also calculates the cumulative value at the reversal using segment .txt files.

    % Read core ASI data for metadata
    coreData = readtable(coreDataPath);
    
    % Initialize output table
    exploitExploreData = table();
    
    for i = 1:length(ages)
        age = ages(i);
        revMarkerFile = fullfile(revMarkerDir, sprintf('REV_MARKERS_P%d.txt', age));
        cpDataPath = fullfile('/Users/oliver/Desktop/ASI/ASI/MAT Files/', sprintf('raw_cpdata_%d', age));
        segmentPath = fullfile('/Users/oliver/Desktop/ASI/ASI/MAT Files/', sprintf('segment_%d', age));
        
        if ~isfile(revMarkerFile)
            disp(['Reversal marker file not found: ', revMarkerFile]);
            continue;
        end
        
        % Read reversal markers
        revMarkers = readtable(revMarkerFile, 'Delimiter', 'tab');
        
        for j = 1:height(revMarkers)
            segmentFile = revMarkers.Segment_File{j};
            revTrial = revMarkers.Relative_Middle_Reversal(j);
            
            % Extract Rat Name, Date, and Reversal Name from filename
            tokens = regexp(segmentFile, '(DEV\d+)_P(\d+)_PROB_(\d+)_REV(\d+)_REV(\d+)', 'tokens', 'once');
            if isempty(tokens), continue; end
            ratName = tokens{1};
            sessionDate = tokens{3};
            revName = sprintf('REV%s_REV%s', tokens{4}, tokens{5});
            
            % Get Rat Sex and Group from core data
            ratIdx = strcmp(coreData.Rat, ratName);
            if any(ratIdx)
                sex = coreData.Sex{ratIdx};
                group = coreData.Group{ratIdx};
            else
                sex = "Unknown";
                group = "Unknown";
            end
            
            % Find corresponding CP data file
            cpFileName = fullfile(cpDataPath, sprintf('CP_SI_%s_P%d_PROB_%s_%s.csv', ratName, age, sessionDate, revName));
            if ~isfile(cpFileName)
                disp(['CP file not found: ', cpFileName]);
                continue;
            end
            
            % Read CP data
            cpData = readtable(cpFileName);
            
            % Find CPs before the reversal
            priorCPs = cpData(cpData.Trial < revTrial, :);
            % Find CPs after the reversal
            afterCPs = cpData(cpData.Trial > revTrial, :);
            
            % Locate corresponding segment file
            segmentFilePath = fullfile(segmentPath, segmentFile);
            if ~isfile(segmentFilePath)
                disp(['Segment file not found: ', segmentFilePath]);
                revCumulative = NaN;
            else
                % Read binary 0/1 data from segment file
                segmentData = readmatrix(segmentFilePath);
                if revTrial <= length(segmentData)
                    revCumulative = sum(segmentData(1:revTrial));
                else
                    revCumulative = NaN;
                end
            end
            
            % Initialize an empty table with correct structure if no CPs exist
            emptyRow = array2table(NaN(1, width(cpData)), 'VariableNames', cpData.Properties.VariableNames);
            
            % Select up to 3 CPs before the reversal
            selectedPriorCPs = [emptyRow; emptyRow; emptyRow];
            numPriorCPs = height(priorCPs);
            if numPriorCPs >= 3
                selectedPriorCPs = priorCPs(end-2:end, :);
            elseif numPriorCPs == 2
                selectedPriorCPs = [emptyRow; priorCPs(end-1:end, :)];
            elseif numPriorCPs == 1
                selectedPriorCPs = [emptyRow; emptyRow; priorCPs(end, :)];
            end
            
            % Select up to 3 CPs after the reversal
            selectedAfterCPs = [emptyRow; emptyRow; emptyRow];
            numAfterCPs = height(afterCPs);
            if numAfterCPs >= 3
                selectedAfterCPs = afterCPs(1:3, :);
            elseif numAfterCPs == 2
                selectedAfterCPs = [afterCPs(1:2, :); emptyRow];
            elseif numAfterCPs == 1
                selectedAfterCPs = [afterCPs(1, :); emptyRow; emptyRow];
            end
            
            % Extract CP trial numbers, cumulative values, and slopes (corrected indexing)
            cpPriorTrials = selectedPriorCPs.Trial;
            cpPriorCumulative = selectedPriorCPs.Cumulative_Value;
            cpPriorSlopes = NaN(3,1); % Default to NaN
            
            cpAfterTrials = selectedAfterCPs.Trial;
            cpAfterCumulative = selectedAfterCPs.Cumulative_Value;
            cpAfterSlopes = NaN(3,1);
            
            for k = 1:3
                if ~isnan(cpPriorTrials(k))
                    cpIdx = find(cpData.Trial == cpPriorTrials(k), 1);
                    if ~isempty(cpIdx) && cpIdx < height(cpData)
                        cpPriorSlopes(k) = cpData.Slope(cpIdx + 1); % Get the slope following the CP
                    end
                end
                if ~isnan(cpAfterTrials(k))
                    cpIdx = find(cpData.Trial == cpAfterTrials(k), 1);
                    if ~isempty(cpIdx) && cpIdx < height(cpData)
                        cpAfterSlopes(k) = cpData.Slope(cpIdx + 1); % Get the slope following the CP
                    end
                end
            end
            
            % Append to table
            newRow = table(string(ratName), age, string(sessionDate), string(sex), string(group), string(revName), revTrial, revCumulative, ...
                           cpPriorTrials(1), cpPriorCumulative(1), cpPriorSlopes(1), ...
                           cpPriorTrials(2), cpPriorCumulative(2), cpPriorSlopes(2), ...
                           cpPriorTrials(3), cpPriorCumulative(3), cpPriorSlopes(3), ...
                           cpAfterTrials(1), cpAfterCumulative(1), cpAfterSlopes(1), ...
                           cpAfterTrials(2), cpAfterCumulative(2), cpAfterSlopes(2), ...
                           cpAfterTrials(3), cpAfterCumulative(3), cpAfterSlopes(3), ...
                           'VariableNames', {'Rat', 'Age', 'Date', 'Sex', 'Group', 'Reversal_Name', 'Reversal_Trial', 'Cumulative_At_Rev', ...
                                             'CP1_Trial_Before', 'CP1_Cumulative_Before', 'CP1_Slope_Before', ...
                                             'CP2_Trial_Before', 'CP2_Cumulative_Before', 'CP2_Slope_Before', ...
                                             'CP3_Trial_Before', 'CP3_Cumulative_Before', 'CP3_Slope_Before', ...
                                             'CP1_Trial_After', 'CP1_Cumulative_After', 'CP1_Slope_After', ...
                                             'CP2_Trial_After', 'CP2_Cumulative_After', 'CP2_Slope_After', ...
                                             'CP3_Trial_After', 'CP3_Cumulative_After', 'CP3_Slope_After'});
            exploitExploreData = [exploitExploreData; newRow];
        end
    end
    
    % Save to CSV
    writetable(exploitExploreData, outputFile);
    disp(['Exploit and Explore data saved to: ', outputFile]);
end
