% step 3 -- make the csv

coreDataPath = '/Users/oliver/Desktop/ASI/ASI/MAT Files/core_ASI_data.csv';
revMarkerDir = '/Users/oliver/Desktop/ASI/ASI/MAT Files/';
baseCritDir = '/Users/oliver/Desktop/ASI/ASI/MAT Files/';
segmentBaseDir = '/Users/oliver/Desktop/ASI/ASI/MAT Files/';
critVal = 1.5;

condensed_exploit_explore_sheet(coreDataPath, revMarkerDir, baseCritDir, segmentBaseDir, critVal);


function condensed_exploit_explore_sheet(coreDataPath, revMarkerDir, baseCritDir, segmentBaseDir, critVal)

% Output filename
outputFile = fullfile(baseCritDir, sprintf('exploit_explore_data_crit%.1f.csv', critVal));
disp(['Saving output to: ', outputFile]);

% Ages
ages = [30, 50, 70, 90, 120, 190];

% Load core data
coreData = readtable(coreDataPath);

% Initialize output table
exploitExploreData = table();

for i = 1:length(ages)
    age = ages(i);
    disp(['Processing age: ', num2str(age)]);

    % Directories
    cpDataPath = fullfile(baseCritDir, sprintf('raw_cpdata_crit%.1f', critVal));
    segmentPath = fullfile(segmentBaseDir, sprintf('segment_%d', age));
    revMarkerFile = fullfile(revMarkerDir, sprintf('REV_MARKERS_P%d.txt', age));

    if ~isfile(revMarkerFile)
        disp(['Reversal marker file not found: ', revMarkerFile]);
        continue;
    end

    revMarkers = readtable(revMarkerFile, 'Delimiter', 'tab');

    for j = 1:height(revMarkers)
        segmentFile = revMarkers.Segment_File{j};
        revTrial = revMarkers.Relative_Middle_Reversal(j);

        tokens = regexp(segmentFile, '(DEV\d+)_P(\d+)_PROB_(\d+)_REV(\d+)_REV(\d+)', 'tokens', 'once');
        if isempty(tokens), continue; end
        ratName = tokens{1};
        sessionDate = tokens{3};
        revName = sprintf('REV%s_REV%s', tokens{4}, tokens{5});

        ratIdx = strcmp(coreData.Rat, ratName);
        if any(ratIdx)
            sex = coreData.Sex{ratIdx};
            group = coreData.Group{ratIdx};
        else
            sex = "Unknown";
            group = "Unknown";
        end

        cpFileName = fullfile(cpDataPath, sprintf('CP_SI_%s_P%d_PROB_%s_%s.csv', ratName, age, sessionDate, revName));
        if ~isfile(cpFileName)
            disp(['CP file not found: ', cpFileName]);
            continue;
        end

        cpData = readtable(cpFileName);
        priorCPs = cpData(cpData.Trial < revTrial, :);
        afterCPs = cpData(cpData.Trial > revTrial, :);

        % Find cumulative at reversal
        segmentFilePath = fullfile(segmentPath, segmentFile);
        if ~isfile(segmentFilePath)
            disp(['Segment file not found: ', segmentFilePath]);
            revCumulative = NaN;
        else
            segmentData = readmatrix(segmentFilePath);
            if revTrial <= length(segmentData)
                revCumulative = sum(segmentData(1:revTrial));
            else
                revCumulative = NaN;
            end
        end

        % Handle empty CP rows
        emptyRow = array2table(NaN(1, width(cpData)), 'VariableNames', cpData.Properties.VariableNames);

        % --- Prior CPs (up to 4) ---
        selectedPriorCPs = repmat(emptyRow, 4, 1);
        numPrior = height(priorCPs);
        if numPrior >= 4
            selectedPriorCPs = priorCPs(end-3:end, :);
        elseif numPrior > 0
            selectedPriorCPs(end-numPrior+1:end, :) = priorCPs(end-numPrior+1:end, :);
        end

        % --- After CPs (up to 4) ---
        selectedAfterCPs = repmat(emptyRow, 4, 1);
        numAfter = height(afterCPs);
        if numAfter >= 4
            selectedAfterCPs = afterCPs(1:4, :);
        elseif numAfter > 0
            selectedAfterCPs(1:numAfter, :) = afterCPs(1:numAfter, :);
        end

        % --- Extract CP info ---
        cpPriorTrials = selectedPriorCPs.Trial;
        cpPriorCumulative = selectedPriorCPs.Cumulative_Value;
        cpPriorSlopes = NaN(4,1);

        cpAfterTrials = selectedAfterCPs.Trial;
        cpAfterCumulative = selectedAfterCPs.Cumulative_Value;
        cpAfterSlopes = NaN(4,1);

        for k = 1:4
            if ~isnan(cpPriorTrials(k))
                cpIdx = find(cpData.Trial == cpPriorTrials(k), 1);
                if ~isempty(cpIdx) && cpIdx < height(cpData)
                    cpPriorSlopes(k) = cpData.Slope(cpIdx + 1);
                end
            end
            if ~isnan(cpAfterTrials(k))
                cpIdx = find(cpData.Trial == cpAfterTrials(k), 1);
                if ~isempty(cpIdx) && cpIdx < height(cpData)
                    cpAfterSlopes(k) = cpData.Slope(cpIdx + 1);
                end
            end
        end

        % --- Add Row ---
        newRow = table(string(ratName), age, string(sessionDate), string(sex), string(group), string(revName), revTrial, revCumulative, ...
            'VariableNames', {'Rat', 'Age', 'Date', 'Sex', 'Group', 'Reversal_Name', 'Reversal_Trial', 'Cumulative_At_Rev'});

        % Add Prior CPs
        for p = 1:4
            newRow.(sprintf('CP%d_Trial_Before', p)) = cpPriorTrials(p);
            newRow.(sprintf('CP%d_Cumulative_Before', p)) = cpPriorCumulative(p);
            newRow.(sprintf('CP%d_Slope_Before', p)) = cpPriorSlopes(p);
        end

        % Add After CPs
        for p = 1:4
            newRow.(sprintf('CP%d_Trial_After', p)) = cpAfterTrials(p);
            newRow.(sprintf('CP%d_Cumulative_After', p)) = cpAfterCumulative(p);
            newRow.(sprintf('CP%d_Slope_After', p)) = cpAfterSlopes(p);
        end

        exploitExploreData = [exploitExploreData; newRow];
    end
end

% Save CSV
writetable(exploitExploreData, outputFile);
disp(['âœ… Exploit/Explore data saved to: ', outputFile]);

end
